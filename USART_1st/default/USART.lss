
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004d  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ee  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000074  00000000  00000000  0000034f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f4  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000093  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include<avr/io.h>

#define USART0 0
#define USART1 1

main() {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	USART_init(0,8);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	68 e0       	ldi	r22, 0x08	; 8
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_init>

	while(1) {
		USART0_send('A');
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 a8 00 	call	0x150	; 0x150 <USART0_send>
  da:	fb cf       	rjmp	.-10     	; 0xd2 <main+0x14>

000000dc <USART_init>:



// 프레임 포멧 설정
void USART_init(unsigned char ch, unsigned int ubrr_baud)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <USART_init+0x6>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	7b 83       	std	Y+3, r23	; 0x03
  ec:	6a 83       	std	Y+2, r22	; 0x02
	if (ch == USART0) {
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 23       	and	r24, r24
  f2:	99 f4       	brne	.+38     	; 0x11a <USART_init+0x3e>
		UCSR0B |= 1 << RXEN0 | 1 << TXEN0;
  f4:	aa e2       	ldi	r26, 0x2A	; 42
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ea e2       	ldi	r30, 0x2A	; 42
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 61       	ori	r24, 0x18	; 24
 100:	8c 93       	st	X, r24
		UBRR0H = ubrr_baud >> 8;
 102:	e0 e9       	ldi	r30, 0x90	; 144
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	8a 81       	ldd	r24, Y+2	; 0x02
 108:	9b 81       	ldd	r25, Y+3	; 0x03
 10a:	89 2f       	mov	r24, r25
 10c:	99 27       	eor	r25, r25
 10e:	80 83       	st	Z, r24
		UBRR0L = ubrr_baud;
 110:	e9 e2       	ldi	r30, 0x29	; 41
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	8a 81       	ldd	r24, Y+2	; 0x02
 116:	80 83       	st	Z, r24
 118:	15 c0       	rjmp	.+42     	; 0x144 <USART_init+0x68>
		}

	else if (ch == USART1){
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	91 f4       	brne	.+36     	; 0x144 <USART_init+0x68>
		UCSR1B |= 1 << RXEN1 | 1 << TXEN1;
 120:	aa e9       	ldi	r26, 0x9A	; 154
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	ea e9       	ldi	r30, 0x9A	; 154
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 61       	ori	r24, 0x18	; 24
 12c:	8c 93       	st	X, r24
		UBRR1H = ubrr_baud >> 8;
 12e:	e8 e9       	ldi	r30, 0x98	; 152
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	89 2f       	mov	r24, r25
 138:	99 27       	eor	r25, r25
 13a:	80 83       	st	Z, r24
		UBRR1L = ubrr_baud;
 13c:	e9 e9       	ldi	r30, 0x99	; 153
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	80 83       	st	Z, r24
		}
}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <USART0_send>:

// 폴링방식 문자열 송신
void USART0_send(char data){
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	0f 92       	push	r0
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)) ); // UDR 레지스터가 빌 때까지 폴링
 15c:	eb e2       	ldi	r30, 0x2B	; 43
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	80 72       	andi	r24, 0x20	; 32
 168:	90 70       	andi	r25, 0x00	; 0
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	b9 f3       	breq	.-18     	; 0x15c <USART0_send+0xc>
	UDR0 = data; // UDR 레지스터에 값을 기록
 16e:	ec e2       	ldi	r30, 0x2C	; 44
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 83       	st	Z, r24
}
 176:	0f 90       	pop	r0
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	08 95       	ret

0000017e <USART0_receive>:

// 폴링방식 문자열 수신
char USART0_receive(){
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSR0A & (1 << RXC0)) ); // UDR 레지스터에 문자 수신 검사
 186:	eb e2       	ldi	r30, 0x2B	; 43
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 23       	and	r24, r24
 18e:	dc f7       	brge	.-10     	; 0x186 <USART0_receive+0x8>
	return UDR0;
 190:	ec e2       	ldi	r30, 0x2C	; 44
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
}
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
