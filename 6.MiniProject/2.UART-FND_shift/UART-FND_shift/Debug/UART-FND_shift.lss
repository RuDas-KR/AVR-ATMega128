
UART-FND_shift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027a  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a7  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000249  00000000  00000000  0000075f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c6  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001b5  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000da3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	25 d0       	rcall	.+74     	; 0xfe <main>
  b4:	a8 c0       	rjmp	.+336    	; 0x206 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART_init>:

void tx0_str(char *s) {
	while (*s) {
		USART0_send(*s++);
	}
}
  b8:	81 11       	cpse	r24, r1
  ba:	07 c0       	rjmp	.+14     	; 0xca <USART_init+0x12>
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	88 61       	ori	r24, 0x18	; 24
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	70 93 90 00 	sts	0x0090, r23
  c6:	69 b9       	out	0x09, r22	; 9
  c8:	08 95       	ret
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	49 f4       	brne	.+18     	; 0xe0 <USART_init+0x28>
  ce:	ea e9       	ldi	r30, 0x9A	; 154
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 61       	ori	r24, 0x18	; 24
  d6:	80 83       	st	Z, r24
  d8:	70 93 98 00 	sts	0x0098, r23
  dc:	60 93 99 00 	sts	0x0099, r22
  e0:	08 95       	ret

000000e2 <USART0_receive>:
  e2:	5f 99       	sbic	0x0b, 7	; 11
  e4:	03 c0       	rjmp	.+6      	; 0xec <USART0_receive+0xa>
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	5f 9b       	sbis	0x0b, 7	; 11
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <USART0_receive+0xe>
  ec:	8c b1       	in	r24, 0x0c	; 12
  ee:	08 95       	ret
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	d1 f7       	brne	.-12     	; 0xe8 <USART0_receive+0x6>
  f4:	08 95       	ret

000000f6 <USART0_send>:
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <USART0_send>
  fa:	8c b9       	out	0x0c, r24	; 12
  fc:	08 95       	ret

000000fe <main>:

int main(void) {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	c8 55       	subi	r28, 0x58	; 88
 108:	d1 09       	sbc	r29, r1
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
	unsigned char ch, i;
	int rx[4] = {};
 114:	fe 01       	movw	r30, r28
 116:	31 96       	adiw	r30, 0x01	; 1
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	df 01       	movw	r26, r30
 11c:	1d 92       	st	X+, r1
 11e:	8a 95       	dec	r24
 120:	e9 f7       	brne	.-6      	; 0x11c <main+0x1e>
	int SEG[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x3D, 0x74, 0x30, 0x1E, 0x75, 0x38, 0x15, 0x37, 0x3F, 0x73, 0x67, 0x33, 0x6D, 0x78, 0x3E, 0x2E, 0x2A, 0x76, 0x62, 0x4B};
 122:	88 e4       	ldi	r24, 0x48	; 72
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	19 96       	adiw	r26, 0x09	; 9
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x2e>
	int SELECT[4] = {0x01, 0x02, 0x04, 0x08};
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	e8 e4       	ldi	r30, 0x48	; 72
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	de 01       	movw	r26, r28
 13c:	af 5a       	subi	r26, 0xAF	; 175
 13e:	bf 4f       	sbci	r27, 0xFF	; 255
 140:	01 90       	ld	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	8a 95       	dec	r24
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x42>
	
	USART_init(0,8);
 148:	68 e0       	ldi	r22, 0x08	; 8
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	b4 df       	rcall	.-152    	; 0xb8 <USART_init>
	
	DDRC = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xFF;
 154:	80 93 64 00 	sts	0x0064, r24
			ch = USART0_receive();
			USART0_send(ch);
			if      (ch > 47 && ch < 58 )  ch = ch - 48;	//	0-9 seg-data
			else if (ch > 64 && ch < 91 )  ch = ch - 55;	//	Upper Case Alphabet seg-data
			else if (ch > 86 && ch < 123) ch = ch - 87;	//	Lower Case Alphabet seg-data
			else ch = 0;
 158:	d1 2c       	mov	r13, r1
 15a:	0f 2e       	mov	r0, r31
 15c:	f1 e5       	ldi	r31, 0x51	; 81
 15e:	ef 2e       	mov	r14, r31
 160:	f1 2c       	mov	r15, r1
 162:	f0 2d       	mov	r31, r0
 164:	ec 0e       	add	r14, r28
 166:	fd 1e       	adc	r15, r29
 168:	b8 e0       	ldi	r27, 0x08	; 8
 16a:	eb 0e       	add	r14, r27
 16c:	f1 1c       	adc	r15, r1
			rx[3] = rx[2];		rx[2] = rx[1];		rx[1] = rx[0];		rx[0] = ch;
		}
		
		for(i=0; i<4; i++) {
			PORTG = SELECT[i];
 16e:	05 e6       	ldi	r16, 0x65	; 101
 170:	10 e0       	ldi	r17, 0x00	; 0
	
	DDRC = 0xFF;
	DDRG = 0xFF;
	
	while(1) {
		if(UCSR0A & 0x80) {
 172:	5f 9b       	sbis	0x0b, 7	; 11
 174:	41 c0       	rjmp	.+130    	; 0x1f8 <main+0xfa>
			ch = USART0_receive();
 176:	b5 df       	rcall	.-150    	; 0xe2 <USART0_receive>
 178:	c8 2e       	mov	r12, r24
			USART0_send(ch);
 17a:	bd df       	rcall	.-134    	; 0xf6 <USART0_send>
			if      (ch > 47 && ch < 58 )  ch = ch - 48;	//	0-9 seg-data
 17c:	80 ed       	ldi	r24, 0xD0	; 208
 17e:	8c 0d       	add	r24, r12
 180:	8a 30       	cpi	r24, 0x0A	; 10
 182:	60 f0       	brcs	.+24     	; 0x19c <main+0x9e>
			else if (ch > 64 && ch < 91 )  ch = ch - 55;	//	Upper Case Alphabet seg-data
 184:	8f eb       	ldi	r24, 0xBF	; 191
 186:	8c 0d       	add	r24, r12
 188:	8a 31       	cpi	r24, 0x1A	; 26
 18a:	18 f4       	brcc	.+6      	; 0x192 <main+0x94>
 18c:	89 ec       	ldi	r24, 0xC9	; 201
 18e:	8c 0d       	add	r24, r12
 190:	05 c0       	rjmp	.+10     	; 0x19c <main+0x9e>
			else if (ch > 86 && ch < 123) ch = ch - 87;	//	Lower Case Alphabet seg-data
 192:	89 ea       	ldi	r24, 0xA9	; 169
 194:	8c 0d       	add	r24, r12
 196:	84 32       	cpi	r24, 0x24	; 36
 198:	08 f0       	brcs	.+2      	; 0x19c <main+0x9e>
			else ch = 0;
 19a:	8d 2d       	mov	r24, r13
			rx[3] = rx[2];		rx[2] = rx[1];		rx[1] = rx[0];		rx[0] = ch;
 19c:	2d 81       	ldd	r18, Y+5	; 0x05
 19e:	3e 81       	ldd	r19, Y+6	; 0x06
 1a0:	38 87       	std	Y+8, r19	; 0x08
 1a2:	2f 83       	std	Y+7, r18	; 0x07
 1a4:	2b 81       	ldd	r18, Y+3	; 0x03
 1a6:	3c 81       	ldd	r19, Y+4	; 0x04
 1a8:	3e 83       	std	Y+6, r19	; 0x06
 1aa:	2d 83       	std	Y+5, r18	; 0x05
 1ac:	29 81       	ldd	r18, Y+1	; 0x01
 1ae:	3a 81       	ldd	r19, Y+2	; 0x02
 1b0:	3c 83       	std	Y+4, r19	; 0x04
 1b2:	2b 83       	std	Y+3, r18	; 0x03
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	1e c0       	rjmp	.+60     	; 0x1f8 <main+0xfa>
		}
		
		for(i=0; i<4; i++) {
			PORTG = SELECT[i];
 1bc:	80 81       	ld	r24, Z
 1be:	32 96       	adiw	r30, 0x02	; 2
 1c0:	d8 01       	movw	r26, r16
 1c2:	8c 93       	st	X, r24
			PORTC = SEG[rx[i]];
 1c4:	da 01       	movw	r26, r20
 1c6:	8d 91       	ld	r24, X+
 1c8:	9d 91       	ld	r25, X+
 1ca:	ad 01       	movw	r20, r26
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	2c 0f       	add	r18, r28
 1d6:	3d 1f       	adc	r19, r29
 1d8:	82 0f       	add	r24, r18
 1da:	93 1f       	adc	r25, r19
 1dc:	dc 01       	movw	r26, r24
 1de:	18 96       	adiw	r26, 0x08	; 8
 1e0:	8c 91       	ld	r24, X
 1e2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	87 ee       	ldi	r24, 0xE7	; 231
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xea>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xf0>
 1ee:	00 00       	nop
			else if (ch > 86 && ch < 123) ch = ch - 87;	//	Lower Case Alphabet seg-data
			else ch = 0;
			rx[3] = rx[2];		rx[2] = rx[1];		rx[1] = rx[0];		rx[0] = ch;
		}
		
		for(i=0; i<4; i++) {
 1f0:	ee 15       	cp	r30, r14
 1f2:	ff 05       	cpc	r31, r15
 1f4:	19 f7       	brne	.-58     	; 0x1bc <main+0xbe>
 1f6:	bd cf       	rjmp	.-134    	; 0x172 <main+0x74>
 1f8:	fe 01       	movw	r30, r28
 1fa:	ef 5a       	subi	r30, 0xAF	; 175
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	ae 01       	movw	r20, r28
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	db cf       	rjmp	.-74     	; 0x1bc <main+0xbe>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
