
UART-FND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000024a  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000175  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e7  00000000  00000000  000006f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014e  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001c4  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 35       	cpi	r26, 0x58	; 88
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1f d0       	rcall	.+62     	; 0xf2 <main>
  b4:	9e c0       	rjmp	.+316    	; 0x1f2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART_init>:
#define USART1 1

// 프레임 포맷 설정
void USART_init(unsigned char ch, unsigned int ubrr_baud)
{
	if (ch == USART0) {
  b8:	81 11       	cpse	r24, r1
  ba:	07 c0       	rjmp	.+14     	; 0xca <USART_init+0x12>
		UCSR0B |= 1 << RXEN0 | 1 << TXEN0;
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	88 61       	ori	r24, 0x18	; 24
  c0:	8a b9       	out	0x0a, r24	; 10
		UBRR0H = ubrr_baud >> 8;
  c2:	70 93 90 00 	sts	0x0090, r23
		UBRR0L = ubrr_baud;
  c6:	69 b9       	out	0x09, r22	; 9
  c8:	08 95       	ret
	}

	else if (ch == USART1){
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	49 f4       	brne	.+18     	; 0xe0 <USART_init+0x28>
		UCSR1B |= 1 << RXEN1 | 1 << TXEN1;
  ce:	ea e9       	ldi	r30, 0x9A	; 154
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 61       	ori	r24, 0x18	; 24
  d6:	80 83       	st	Z, r24
		UBRR1H = ubrr_baud >> 8;
  d8:	70 93 98 00 	sts	0x0098, r23
		UBRR1L = ubrr_baud;
  dc:	60 93 99 00 	sts	0x0099, r22
  e0:	08 95       	ret

000000e2 <USART0_send>:
	}
}

//폴링을 이용한 문자 송신
void USART0_send(char data){
	while (!(UCSR0A & (1 << UDRE0)) ); // UDR 레지스터가 빌 때까지 폴링
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <USART0_send>
	UDR0 = data;			   // UDR 레지스터에 값을 기록
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <USART0_receive>:
}

//폴링을 이용한 문자 수신
char USART0_receive(){
	while (!(UCSR0A & (1 << RXC0)) ); // UDR 레지스터에 문자 수신 검사
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <USART0_receive>
	return UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
}
  f0:	08 95       	ret

000000f2 <main>:

void fnd(int num);

int main() {
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	c7 55       	subi	r28, 0x57	; 87
  fc:	d1 09       	sbc	r29, r1
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61

	int SEG[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x3D, 0x74, 0x30, 0x1E, 0x75, 0x38, 0x15, 0x37, 0x3F, 0x73, 0x67, 0x33, 0x6D, 0x78, 0x3E, 0x2E, 0x2A, 0x76, 0x62, 0x4B};
 108:	88 e4       	ldi	r24, 0x48	; 72
 10a:	e0 e0       	ldi	r30, 0x00	; 0
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	de 01       	movw	r26, r28
 110:	11 96       	adiw	r26, 0x01	; 1
 112:	01 90       	ld	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x20>
	
	USART_init(0,8);
 11a:	68 e0       	ldi	r22, 0x08	; 8
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	cb df       	rcall	.-106    	; 0xb8 <USART_init>
	DDRA=0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	8a bb       	out	0x1a, r24	; 26

	unsigned char text[]="Start USART \r\n";
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	e8 e4       	ldi	r30, 0x48	; 72
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	de 01       	movw	r26, r28
 12e:	a7 5b       	subi	r26, 0xB7	; 183
 130:	bf 4f       	sbci	r27, 0xFF	; 255
 132:	01 90       	ld	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	9a 95       	dec	r25
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x40>
	unsigned char i=0;
	unsigned char str;
	int num;

	DDRC = 0xFF;
 13a:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xFF;
 13c:	80 93 64 00 	sts	0x0064, r24

	while(text[i] != '\0') {
 140:	2a 96       	adiw	r28, 0x0a	; 10
 142:	8f ad       	ldd	r24, Y+63	; 0x3f
 144:	2a 97       	sbiw	r28, 0x0a	; 10
 146:	88 23       	and	r24, r24
 148:	61 f0       	breq	.+24     	; 0x162 <main+0x70>
	
	USART_init(0,8);
	DDRA=0xFF;

	unsigned char text[]="Start USART \r\n";
	unsigned char i=0;
 14a:	10 e0       	ldi	r17, 0x00	; 0

	DDRC = 0xFF;
	DDRG = 0xFF;

	while(text[i] != '\0') {
		USART0_send(text[i++]);
 14c:	1f 5f       	subi	r17, 0xFF	; 255
 14e:	c9 df       	rcall	.-110    	; 0xe2 <USART0_send>
	int num;

	DDRC = 0xFF;
	DDRG = 0xFF;

	while(text[i] != '\0') {
 150:	e9 e4       	ldi	r30, 0x49	; 73
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	e1 0f       	add	r30, r17
 15a:	f1 1d       	adc	r31, r1
 15c:	80 81       	ld	r24, Z
 15e:	81 11       	cpse	r24, r1
 160:	f5 cf       	rjmp	.-22     	; 0x14c <main+0x5a>
		}	//	Lower Case Alphabet
	}
}

void fnd(int num) {
	PORTG = 0x01;
 162:	05 e6       	ldi	r16, 0x65	; 101
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	ff 24       	eor	r15, r15
 168:	f3 94       	inc	r15
	while(text[i] != '\0') {
		USART0_send(text[i++]);
	}
	
	while(1) {
		str=USART0_receive();
 16a:	bf df       	rcall	.-130    	; 0xea <USART0_receive>
 16c:	e8 2e       	mov	r14, r24
		USART0_send(str);
 16e:	b9 df       	rcall	.-142    	; 0xe2 <USART0_send>
		
		num = str;	//	char => int
 170:	8e 2d       	mov	r24, r14
 172:	90 e0       	ldi	r25, 0x00	; 0
		if(num>47 && num <58) {
 174:	9c 01       	movw	r18, r24
 176:	20 53       	subi	r18, 0x30	; 48
 178:	31 09       	sbc	r19, r1
 17a:	2a 30       	cpi	r18, 0x0A	; 10
 17c:	31 05       	cpc	r19, r1
 17e:	70 f4       	brcc	.+28     	; 0x19c <main+0xaa>
			num = num - 48;
			fnd(SEG[num]);
 180:	f9 01       	movw	r30, r18
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	8c 0f       	add	r24, r28
 18c:	9d 1f       	adc	r25, r29
 18e:	e8 0f       	add	r30, r24
 190:	f9 1f       	adc	r31, r25
 192:	80 81       	ld	r24, Z
		}	//	Lower Case Alphabet
	}
}

void fnd(int num) {
	PORTG = 0x01;
 194:	f8 01       	movw	r30, r16
 196:	f0 82       	st	Z, r15
	PORTC = num;
 198:	85 bb       	out	0x15, r24	; 21
 19a:	e7 cf       	rjmp	.-50     	; 0x16a <main+0x78>
		if(num>47 && num <58) {
			num = num - 48;
			fnd(SEG[num]);
		}	//	0~9
		
		else if(num>64 && num<91) {
 19c:	9c 01       	movw	r18, r24
 19e:	21 54       	subi	r18, 0x41	; 65
 1a0:	31 09       	sbc	r19, r1
 1a2:	2a 31       	cpi	r18, 0x1A	; 26
 1a4:	31 05       	cpc	r19, r1
 1a6:	78 f4       	brcc	.+30     	; 0x1c6 <main+0xd4>
			num = num - 55;
			fnd(SEG[num]);
 1a8:	c7 97       	sbiw	r24, 0x37	; 55
 1aa:	fc 01       	movw	r30, r24
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	8c 0f       	add	r24, r28
 1b6:	9d 1f       	adc	r25, r29
 1b8:	e8 0f       	add	r30, r24
 1ba:	f9 1f       	adc	r31, r25
 1bc:	80 81       	ld	r24, Z
		}	//	Lower Case Alphabet
	}
}

void fnd(int num) {
	PORTG = 0x01;
 1be:	f8 01       	movw	r30, r16
 1c0:	f0 82       	st	Z, r15
	PORTC = num;
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	d2 cf       	rjmp	.-92     	; 0x16a <main+0x78>
		else if(num>64 && num<91) {
			num = num - 55;
			fnd(SEG[num]);
		}	//	Upper Case Alphabet
		
		else if(num>96 && num<123) {
 1c6:	9c 01       	movw	r18, r24
 1c8:	21 56       	subi	r18, 0x61	; 97
 1ca:	31 09       	sbc	r19, r1
 1cc:	2a 31       	cpi	r18, 0x1A	; 26
 1ce:	31 05       	cpc	r19, r1
 1d0:	60 f6       	brcc	.-104    	; 0x16a <main+0x78>
			num = num - 87;
			fnd(SEG[num]);
 1d2:	87 55       	subi	r24, 0x57	; 87
 1d4:	91 09       	sbc	r25, r1
 1d6:	fc 01       	movw	r30, r24
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	8c 0f       	add	r24, r28
 1e2:	9d 1f       	adc	r25, r29
 1e4:	e8 0f       	add	r30, r24
 1e6:	f9 1f       	adc	r31, r25
 1e8:	80 81       	ld	r24, Z
		}	//	Lower Case Alphabet
	}
}

void fnd(int num) {
	PORTG = 0x01;
 1ea:	f8 01       	movw	r30, r16
 1ec:	f0 82       	st	Z, r15
	PORTC = num;
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	bc cf       	rjmp	.-136    	; 0x16a <main+0x78>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
