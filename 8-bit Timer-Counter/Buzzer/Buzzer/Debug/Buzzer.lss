
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  000001fe  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000104  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c0  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000126  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000132  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008f  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c0       	rjmp	.+112    	; 0xae <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	46 d0       	rcall	.+140    	; 0x136 <main>
  aa:	6d c0       	rjmp	.+218    	; 0x186 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_15>:
	}
}

unsigned long ms_req_buzzer(unsigned long ms_freq) {
	return (F_CPU / (2*PRESCALE*ms_freq)) - 1;
}
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	80 91 04 01 	lds	r24, 0x0104
  c4:	90 91 05 01 	lds	r25, 0x0105
  c8:	a0 91 06 01 	lds	r26, 0x0106
  cc:	b0 91 07 01 	lds	r27, 0x0107
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
  d6:	80 93 04 01 	sts	0x0104, r24
  da:	90 93 05 01 	sts	0x0105, r25
  de:	a0 93 06 01 	sts	0x0106, r26
  e2:	b0 93 07 01 	sts	0x0107, r27
  e6:	80 91 00 01 	lds	r24, 0x0100
  ea:	90 91 01 01 	lds	r25, 0x0101
  ee:	a0 91 02 01 	lds	r26, 0x0102
  f2:	b0 91 03 01 	lds	r27, 0x0103
  f6:	89 2b       	or	r24, r25
  f8:	8a 2b       	or	r24, r26
  fa:	8b 2b       	or	r24, r27
  fc:	99 f0       	breq	.+38     	; 0x124 <__vector_15+0x76>
  fe:	80 91 00 01 	lds	r24, 0x0100
 102:	90 91 01 01 	lds	r25, 0x0101
 106:	a0 91 02 01 	lds	r26, 0x0102
 10a:	b0 91 03 01 	lds	r27, 0x0103
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	a1 09       	sbc	r26, r1
 112:	b1 09       	sbc	r27, r1
 114:	80 93 00 01 	sts	0x0100, r24
 118:	90 93 01 01 	sts	0x0101, r25
 11c:	a0 93 02 01 	sts	0x0102, r26
 120:	b0 93 03 01 	sts	0x0103, r27
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:


int main(void){
	DDRB |= 1 << PB4;
 136:	bc 9a       	sbi	0x17, 4	; 23

	TCCR0 |= 1 << WGM01;			// Setup CTC Mode
 138:	83 b7       	in	r24, 0x33	; 51
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= 1 << CS02 | 1 << CS01;	// 클럭 소스 / 128, normal mode
 13e:	83 b7       	in	r24, 0x33	; 51
 140:	86 60       	ori	r24, 0x06	; 6
 142:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << OCIE0;			// Timer0 Compare Match interrupt 활성화
 144:	87 b7       	in	r24, 0x37	; 55
 146:	82 60       	ori	r24, 0x02	; 2
 148:	87 bf       	out	0x37, r24	; 55

	sei();							// 전역 인터럽트 활성화
 14a:	78 94       	sei

	while(1){
		if (req_timer0 == 0){
			req_timer0 = ms_req_buzzer(440);
 14c:	46 e4       	ldi	r20, 0x46	; 70
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
			PORTB ^= 1 << PB4;
 154:	20 e1       	ldi	r18, 0x10	; 16
	TIMSK |= 1 << OCIE0;			// Timer0 Compare Match interrupt 활성화

	sei();							// 전역 인터럽트 활성화

	while(1){
		if (req_timer0 == 0){
 156:	80 91 00 01 	lds	r24, 0x0100
 15a:	90 91 01 01 	lds	r25, 0x0101
 15e:	a0 91 02 01 	lds	r26, 0x0102
 162:	b0 91 03 01 	lds	r27, 0x0103
 166:	89 2b       	or	r24, r25
 168:	8a 2b       	or	r24, r26
 16a:	8b 2b       	or	r24, r27
 16c:	a1 f7       	brne	.-24     	; 0x156 <main+0x20>
			req_timer0 = ms_req_buzzer(440);
 16e:	40 93 00 01 	sts	0x0100, r20
 172:	50 93 01 01 	sts	0x0101, r21
 176:	60 93 02 01 	sts	0x0102, r22
 17a:	70 93 03 01 	sts	0x0103, r23
			PORTB ^= 1 << PB4;
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	82 27       	eor	r24, r18
 182:	88 bb       	out	0x18, r24	; 24
 184:	e8 cf       	rjmp	.-48     	; 0x156 <main+0x20>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
